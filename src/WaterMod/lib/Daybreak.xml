<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Daybreak</name>
    </assembly>
    <members>
        <member name="T:Daybreak.Common.Assets.AssetReplacer">
            <summary>
                Facilitates the dynamic and necessarily transient replacement of
                <see cref="T:ReLogic.Content.Asset`1" /> values.
            </summary>
            <remarks>
                <b>
                    If you are intending to permanently modify an asset for the length
                    of your mod's existence rather than in a specific or defined
                    context, either replace the <see cref="T:ReLogic.Content.Asset`1" /> instance directly
                    or use the Resource Pack API (TODO).
                </b>
                <br />
                The provided APIs directly mutate the contents of an
                <see cref="T:ReLogic.Content.Asset`1" /> rather than, say, the stored instances in
                <see cref="T:Terraria.GameContent.TextureAssets" />.  As a result, these replacements
                unambiguously propagate throughout all contexts in which the asset may
                be needed, but they made be superseded by direct changes to values in
                <see cref="T:Terraria.GameContent.TextureAssets" /> by other mods.
            </remarks>
        </member>
        <member name="M:Daybreak.Common.Assets.AssetReplacer.Replace``1(ReLogic.Content.Asset{``0},``0)">
            <summary>
                Replaces the given asset with the new value.
            </summary>
            <param name="oldAsset">The asset to replace.</param>
            <param name="newAsset">The new asset.</param>
            <typeparam name="T">The asset type.</typeparam>
            <returns>A handle to the asset replacement.</returns>
        </member>
        <member name="T:Daybreak.Common.Assets.AssetReplacer.Handle`1">
            <summary>
                An asset replacement handle which, when disposed, restores the
                replaced asset to its original value.
            </summary>
            <typeparam name="T">The asset type.</typeparam>
        </member>
        <member name="M:Daybreak.Common.Assets.AssetReplacer.Handle`1.Dispose">
            <summary>
                Disposes of the handle, restoring the original asset.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Assets.AssetReplacer.Npc(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
                <see cref="F:Terraria.GameContent.TextureAssets.Npc" />
            </summary>
        </member>
        <member name="M:Daybreak.Common.Assets.AssetReplacer.Extra(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
                <see cref="F:Terraria.GameContent.TextureAssets.Extra" />
            </summary>
        </member>
        <member name="T:Daybreak.Common.Assets.IMutableAssetProvider`1">
            <summary>
                Provides an API to get and set the value of an asset of type
                <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The asset type.</typeparam>
            <remarks>
                This may seem somewhat redundant but facilitates additional agnosticism
                in the context in which an asset is provided for the
                <see cref="T:Daybreak.Common.Assets.AssetReplacer" /> API.
            </remarks>
        </member>
        <member name="P:Daybreak.Common.Assets.IMutableAssetProvider`1.Asset">
            <summary>
                The mutable asset.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Assets.ReLogicMutableAssetProvider`1">
            <summary>
                Providers an API for mutating the value of an <see cref="T:ReLogic.Content.Asset`1" />.
            </summary>
            <param name="Source">The <see cref="T:ReLogic.Content.Asset`1" /> to be mutated.</param>
            <typeparam name="T">The type of the asset.</typeparam>
        </member>
        <member name="M:Daybreak.Common.Assets.ReLogicMutableAssetProvider`1.#ctor(ReLogic.Content.Asset{`0})">
            <summary>
                Providers an API for mutating the value of an <see cref="T:ReLogic.Content.Asset`1" />.
            </summary>
            <param name="Source">The <see cref="T:ReLogic.Content.Asset`1" /> to be mutated.</param>
            <typeparam name="T">The type of the asset.</typeparam>
        </member>
        <member name="P:Daybreak.Common.Assets.ReLogicMutableAssetProvider`1.Source">
            <summary>The <see cref="T:ReLogic.Content.Asset`1" /> to be mutated.</summary>
        </member>
        <member name="T:Daybreak.Common.CIL.IlCursorExtensions">
            <summary>
                API extensions for <see cref="T:MonoMod.Cil.ILCursor" />s and related APIs.
            </summary>
        </member>
        <member name="M:Daybreak.Common.CIL.IlCursorExtensions.AddVariable``1(MonoMod.Cil.ILCursor)">
            <summary>
                Creates a new <see cref="T:Mono.Cecil.Cil.VariableDefinition" /> appended to the body
                contextualized by the <see cref="T:MonoMod.Cil.ILCursor" />'s
                <see cref="T:MonoMod.Cil.ILContext" />.
            </summary>
            <param name="this">
                The <see cref="T:MonoMod.Cil.ILCursor" /> whose <see cref="P:MonoMod.Cil.ILCursor.Context" /> to
                use to determine the <see cref="T:Mono.Cecil.Cil.MethodBody" /> to append to import
                the CLR-represented type into a Cecil-represented type.
            </param>
            <typeparam name="T">
                The CLR-represented type to import as a Cecil-represented type to
                define the variable.
            </typeparam>
            <returns>The newly-created <see cref="T:Mono.Cecil.Cil.VariableDefinition" />.</returns>
        </member>
        <member name="M:Daybreak.Common.CIL.IlCursorExtensions.AddVariable(MonoMod.Cil.ILCursor,Mono.Cecil.TypeReference)">
            <summary>
                Creates a new <see cref="T:Mono.Cecil.Cil.VariableDefinition" /> appended to the body
                contextualized by the <see cref="T:MonoMod.Cil.ILCursor" />'s
                <see cref="T:MonoMod.Cil.ILContext" />.
            </summary>
            <param name="this">
                The <see cref="T:MonoMod.Cil.ILCursor" /> whose <see cref="P:MonoMod.Cil.ILCursor.Context" /> to
                use to determine the <see cref="T:Mono.Cecil.Cil.MethodBody" /> to append to.
            </param>
            <param name="type">The type of the variable.</param>
            <returns>The newly-created <see cref="T:Mono.Cecil.Cil.VariableDefinition" />.</returns>
        </member>
        <member name="M:Daybreak.Common.CIL.IlCursorExtensions.AddVariable``1(MonoMod.Cil.ILContext)">
            <summary>
                Creates a new <see cref="T:Mono.Cecil.Cil.VariableDefinition" /> appended to the body
                contextualized by this <see cref="T:MonoMod.Cil.ILContext" />.
            </summary>
            <typeparam name="T">
                The CLR-represented type to import as a Cecil-represented type to
                define the variable.
            </typeparam>
            <returns>The newly-created <see cref="T:Mono.Cecil.Cil.VariableDefinition" />.</returns>
        </member>
        <member name="M:Daybreak.Common.CIL.IlCursorExtensions.AddVariable(MonoMod.Cil.ILContext,Mono.Cecil.TypeReference)">
            <summary>
                Creates a new <see cref="T:Mono.Cecil.Cil.VariableDefinition" /> appended to the body
                contextualized by this <see cref="T:MonoMod.Cil.ILContext" />.
            </summary>
            <param name="this"></param>
            <param name="type">The type of the variable.</param>
            <returns>The newly-created <see cref="T:Mono.Cecil.Cil.VariableDefinition" />.</returns>
        </member>
        <member name="M:Daybreak.Common.CIL.IlCursorExtensions.AddVariable(Mono.Cecil.Cil.MethodBody,Mono.Cecil.TypeReference)">
            <summary>
                Creates a new <see cref="T:Mono.Cecil.Cil.VariableDefinition" /> appended to this
                <see cref="T:Mono.Cecil.Cil.MethodBody" />.
            </summary>
            <param name="this">
                The <see cref="T:Mono.Cecil.Cil.MethodBody" /> to add a new variable to.
            </param>
            <param name="type">The type of the variable.</param>
            <returns>The newly-created <see cref="T:Mono.Cecil.Cil.VariableDefinition" />.</returns>
        </member>
        <member name="E:Daybreak.Common.Features.Hooks.HookLoader.OnEarlyModLoad">
            <summary>
                Internally used to hook into the start of mod loading; useful for
                injecting content into other mods.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Hooks.OnLoadAttribute">
            <summary>
                Automatically calls the decorated function on load.
                <br />
                If the method is instanced, it expects to be part of a parent type
                implementing <see cref="T:Terraria.ModLoader.ILoadable" /> (in which case it is called
                directly after <see cref="M:Terraria.ModLoader.ILoadable.Load(Terraria.ModLoader.Mod)" />).
                <br />
                If the method is static, it will just be called at the end of
                <see cref="M:Terraria.ModLoader.Mod.Autoload" />.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.Hooks.OnLoadAttribute.Side">
            <summary>
                The side to load this on.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Hooks.OnUnloadAttribute">
            <summary>
                Automatically calls the decorated function on unload.
                <br />
                If the method is instanced, it expects to be part of a parent type
                implementing <see cref="T:Terraria.ModLoader.ILoadable" />.
                <br />
                All methods will be run in reverse order at the start of
                <see cref="M:Terraria.ModLoader.ModContent.UnloadModContent" />
                (before <see cref="M:Terraria.ModLoader.MenuLoader.Unload" />).
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.Hooks.OnUnloadAttribute.Side">
            <summary>
                The side to load this on.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Hooks.SubscribesToAttribute`1">
            <summary>
                Automatically subscribes the decorated method to the hook of type
                <typeparamref name="T" /> if applicable.
                <br />
                If this decorates an instance method, the hook will be subscribed when
                <see cref="M:Terraria.ModLoader.Mod.AddContent(Terraria.ModLoader.ILoadable)" /> is called on the instance.  This means
                instance hooks can only automatically be subscribed if the parent class
                is an <see cref="T:Terraria.ModLoader.ILoadable" /> and the instance has actually been loaded.
                <br />
                If this decorates a static method, the hook will be subscribed so long
                as the parent type is visible under
                <see cref="M:Terraria.ModLoader.Core.AssemblyManager.GetLoadableTypes(System.Reflection.Assembly)" /> and the type
                does not have any generic parameters (technical limitation).
            </summary>
            <typeparam name="T">The hook type to subscribe the method to.</typeparam>
        </member>
        <member name="P:Daybreak.Common.Features.Hooks.SubscribesToAttribute`1.Side">
            <summary>
                The side to load this on.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.ModPanel.IHasCustomModConfigButton">
            <summary>
                When implemented by a <see cref="T:Terraria.ModLoader.Mod" />, allows the mod to modify their
                Mod Configuration menu button.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.IHasCustomModConfigButton.CreateModConfigButton(Terraria.ModLoader.UI.UIButton{System.String})">
            <summary>
                Creates the <see cref="T:Terraria.ModLoader.UI.UIButton`1" /> for the mod entry.
                <br />
                This may be either the button for when mods are available, or for
                when they aren't.
            </summary>
            <param name="button">The incoming button.</param>
            <returns>The button to use.</returns>
        </member>
        <member name="T:Daybreak.Common.Features.ModPanel.ModPanelStyle">
            <summary>
                Facilitates the customization of <see cref="T:Terraria.ModLoader.UI.UIModItem" />s through
                various hooks.
            </summary>
            <remarks>
                This style may be applied to any mod, technically, so references to your
                mod instance should be explicit and not assumed.
                <br />
                If you are using an assembly publicizer, you may instead extend
                <see cref="T:Daybreak.Common.Features.ModPanel.ModPanelStyleExt" />, which lets you directly interface with
                the <see cref="T:Terraria.ModLoader.UI.UIModItem" /> instead of the generic <see cref="T:Terraria.GameContent.UI.Elements.UIPanel" />
                instance.
            </remarks>
        </member>
        <member name="T:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind">
            <summary>
                The 'texture kind', denoting known textures that can be overridden.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.ModInfo">
            <summary>
                The 'Mod Info' button.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.ModConfig">
            <summary>
                The 'Mod Config' button.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.Deps">
            <summary>
                The 'Deps' icon, shown to display dependencies and dependents.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.TranslationMod">
            <summary>
                The 'Translation Mod' icon, shown to display that this mod
                implements translations for other mods.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.Error">
            <summary>
                The 'Error' icon, shown to display errors (namely unloading
                issues) to mod developers.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind.InnerPanel">
            <summary>
                The inner panel used to render the 'Enabled'/'Disabled' text.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureOverrides">
            <summary>
                Supplying this dictionary with values for the
                <see cref="T:Daybreak.Common.Features.ModPanel.ModPanelStyle.TextureKind" /> keys will allow you to override the
                default textures used by tModLoader with your own.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.Register">
            <summary>
                Registers this style as known to the implementation.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.InitTemplateInstance">
            <summary>
                Unused; this type is a singleton.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)">
            <summary>
                Invoked before <see cref="M:Terraria.ModLoader.UI.UIModItem.OnInitialize" /> is called.
            </summary>
            <returns>
                <see langword="false" /> to cancel regular initialization behavior,
                <see langword="true" /> to enable regular execution.
            </returns>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostInitialize(Terraria.GameContent.UI.Elements.UIPanel)">
            <summary>
                Invoked after <see cref="M:Terraria.ModLoader.UI.UIModItem.OnInitialize" /> is called
                regardless of what <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)" /> returns.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModIcon(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIImage,System.Int32@)">
            <summary>
                If <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)" /> returns <see langword="true" />, this
                method is invoked to modify the mod icon during initialization.
                <br />
                To remove the icon and shift relevant elements to the left, return
                <see langword="null" />
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModName(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIText)">
            <summary>
                If <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)" /> returns <see langword="true" />, this
                method is invoked to modify the mod name during initialization.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyEnabledText(Terraria.GameContent.UI.Elements.UIPanel,System.String,System.Boolean)">
            <summary>
                Lets you modify the value of the "Enabled/Disabled" text.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel,System.String)">
            <summary>
                Lets you modify the value of the "Reload Required" text.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)">
            <summary>
                Invoked before the "Reload Required" text is drawn, return
                <see langword="false" /> to stop it from drawing.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)">
            <summary>
                Invoked after the "Reload Required" text is drawn, regardless of
                what <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)" /> returns.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)">
            <summary>
                Invoked before hover colors are set.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyHoverTooltip(Terraria.GameContent.UI.Elements.UIPanel,System.String)">
            <summary>
                Allows you to modify the text drawn on the "mouse-over" hover panel.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)">
            <summary>
                Invoked after hover colors are set.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
                Invoked before the element is drawn.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
                Invoked after the element is drawn.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean@)">
            <summary>
                Invoked specifically before the panel is drawn, assuming
                <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> returned <see langword="true" />.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateText(Terraria.UI.UIElement,System.Boolean)">
            <summary>
                Invoked before the "Enabled/Disabled" text is drawn,
                return <see langword="false" /> to stop it from drawing.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateText(Terraria.UI.UIElement,System.Boolean)">
            <summary>
                Invoked after the
                <see cref="M:Terraria.ModLoader.UI.UIModStateText.DrawEnabledText(Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> is called,
                regardless of what
                <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateText(Terraria.UI.UIElement,System.Boolean)" /> returns.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)">
            <summary>
                Invoked before <see cref="M:Terraria.ModLoader.UI.UIModStateText.DrawPanel(Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
                is called, return <see langword="false" /> to stop it from drawing.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)">
            <summary>
                Invoked after <see cref="M:Terraria.ModLoader.UI.UIModStateText.DrawPanel(Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> is
                called, regardless of what
                <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)" /> returns.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
                Invoked specifically after the panel is drawn, assuming
                <see cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> returned <see langword="true" />.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyEnabledTextColor(System.Boolean,Microsoft.Xna.Framework.Color)">
            <summary>
                Modifies the "Enabled"/"Disabled" button text.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.GetInfos(Terraria.ModLoader.Mod)">
            <summary>
                Gets the panel information items for this mod.  Offsets are
                automatically calculated.
            </summary>
            <param name="mod">The mod instance to get information from.</param>
            <returns>A collection of panel infos to be displayed.</returns>
            <remarks>
                The <paramref name="mod" /> is passed because, despite panels being a
                per-mod thing, there is nothing necessarily limiting mods from
                sharing panel styles or similar cases.
            </remarks>
        </member>
        <member name="T:Daybreak.Common.Features.ModPanel.ModPanelStyle.PanelInfo">
            <summary>
                An "information" item for the panel, such as the amount of items the
                mod adds.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PanelInfo.#ctor(Terraria.ModLoader.UI.UIHoverImage)">
            <summary>
                An "information" item for the panel, such as the amount of items the
                mod adds.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.ModPanel.ModPanelStyleExt">
            <summary>
                An API extension to <see cref="T:Daybreak.Common.Features.ModPanel.ModPanelStyle" /> that enables you to
                directly interface with the <see cref="T:Terraria.ModLoader.UI.UIModItem" /> instance rather than
                the diluted <see cref="T:Terraria.GameContent.UI.Elements.UIPanel" /> instance.
                <br />
                Intended for use by developers with assembly publicizers who need
                convenient access to the object.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostInitialize(Terraria.GameContent.UI.Elements.UIPanel)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostInitialize(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyModIcon(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIImage,System.Int32@)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModIcon(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIImage,System.Int32@)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyEnabledText(Terraria.GameContent.UI.Elements.UIPanel,System.String,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyEnabledText(Terraria.GameContent.UI.Elements.UIPanel,System.String,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyHoverTooltip(Terraria.GameContent.UI.Elements.UIPanel,System.String)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyHoverTooltip(Terraria.GameContent.UI.Elements.UIPanel,System.String)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyModName(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIText)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModName(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIText)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean@)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean@)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel,System.String)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel,System.String)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawModStateText(Terraria.UI.UIElement,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateText(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawModStateText(Terraria.UI.UIElement,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateText(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreInitialize(Terraria.ModLoader.UI.UIModItem)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreInitialize(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostInitialize(Terraria.ModLoader.UI.UIModItem)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostInitialize(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyModIcon(Terraria.ModLoader.UI.UIModItem,Terraria.GameContent.UI.Elements.UIImage,System.Int32@)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModIcon(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIImage,System.Int32@)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyModName(Terraria.ModLoader.UI.UIModItem,Terraria.GameContent.UI.Elements.UIText)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyModName(Terraria.GameContent.UI.Elements.UIPanel,Terraria.GameContent.UI.Elements.UIText)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreSetHoverColors(Terraria.ModLoader.UI.UIModItem,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostSetHoverColors(Terraria.ModLoader.UI.UIModItem,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostSetHoverColors(Terraria.GameContent.UI.Elements.UIPanel,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDraw(Terraria.ModLoader.UI.UIModItem,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDraw(Terraria.ModLoader.UI.UIModItem,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDraw(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawPanel(Terraria.ModLoader.UI.UIModItem,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean@)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean@)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawPanel(Terraria.ModLoader.UI.UIModItem,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawPanel(Terraria.GameContent.UI.Elements.UIPanel,Microsoft.Xna.Framework.Graphics.SpriteBatch)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyEnabledText(Terraria.ModLoader.UI.UIModItem,System.String,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyEnabledText(Terraria.GameContent.UI.Elements.UIPanel,System.String,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyHoverTooltip(Terraria.ModLoader.UI.UIModItem,System.String)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyHoverTooltip(Terraria.GameContent.UI.Elements.UIPanel,System.String)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.ModifyReloadRequiredText(Terraria.ModLoader.UI.UIModItem,System.String)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.ModifyReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel,System.String)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawReloadRequiredText(Terraria.ModLoader.UI.UIModItem)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawReloadRequiredText(Terraria.ModLoader.UI.UIModItem)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawReloadRequiredText(Terraria.GameContent.UI.Elements.UIPanel)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawModStateText(Terraria.ModLoader.UI.UIModStateText,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateText(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawModStateText(Terraria.ModLoader.UI.UIModStateText,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateText(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PreDrawModStateTextPanel(Terraria.ModLoader.UI.UIModStateText,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PreDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="M:Daybreak.Common.Features.ModPanel.ModPanelStyleExt.PostDrawModStateTextPanel(Terraria.ModLoader.UI.UIModStateText,System.Boolean)">
            <inheritdoc cref="M:Daybreak.Common.Features.ModPanel.ModPanelStyle.PostDrawModStateTextPanel(Terraria.UI.UIElement,System.Boolean)" />
        </member>
        <member name="T:Daybreak.Common.Features.NPCs.DownedFlagHandle">
            <summary>
                A handle to the status of a &quot;downed&quot; flag, representing
                generally the defeat of an NPC within a world (e.g.
                <see cref="F:Terraria.NPC.downedBoss1" />).
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.NPCs.DownedFlagHandle.FullName">
            <summary>
                The full name; a unique identifier for each handle.  Expected to
                be the mod name followed by the unique key
                (<c>ModName/NpcName</c>).
            </summary>
            <remarks>
                Any supplementary vanilla handles should follow this pattern too:
                <c>Terraria/EyeOfCthulhu</c>.
            </remarks>
        </member>
        <member name="P:Daybreak.Common.Features.NPCs.DownedFlagHandle.IsRegistered">
            <summary>
                Whether this handle represents a flag that is known to the handler.
                <br />
                It is possible to create handles prior to initialization of their
                respective handlers for convenience, so their behavior will be
                stubbed otherwise; this exists to differentiate this state.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.NPCs.DownedFlagHandle.Value">
            <summary>
                The mutable value of the associated flag.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.NPCs.DownedFlagHandler">
            <summary>
                Manages &quot;downed&quot; flags, which are typically the status of the
                defeat of an NPC within a world (e.g. <see cref="F:Terraria.NPC.downedBoss1" />).
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.NPCs.DownedFlagHandler.GetHandle(Terraria.ModLoader.Mod,System.String)">
            <summary>
                Gets the handle of a &quot;downed&quot; flag handler.
            </summary>
            <param name="mod">The mod.</param>
            <param name="name">The unique name, per-mod.</param>
            <returns>The handle.</returns>
            <remarks>
                Always returns a value, even if the handler is not registered.
            </remarks>
        </member>
        <member name="M:Daybreak.Common.Features.NPCs.DownedFlagHandler.RegisterDefaultHandle(Terraria.ModLoader.Mod,System.String)">
            <summary>
                Registers a handler with default behavior (that is, handled by
                DAYBREAK).
            </summary>
            <param name="mod">The mod.</param>
            <param name="name">The unique name, per-mod.</param>
            <returns>The handle to this handler.</returns>
        </member>
        <member name="M:Daybreak.Common.Features.NPCs.DownedFlagHandler.RegisterCustomHandle(Terraria.ModLoader.Mod,System.String,Daybreak.Common.Features.NPCs.DownedGetter,Daybreak.Common.Features.NPCs.DownedSetter)">
            <summary>
                Registers a handler with custom, arbitrary behavior.
            </summary>
            <param name="mod">The mod.</param>
            <param name="name">The unique name, per-mod.</param>
            <param name="getter">The <c>get</c> handler.</param>
            <param name="setter">The <c>set</c> handler.</param>
            <returns>The handle to this handler.</returns>
        </member>
        <member name="T:Daybreak.Common.Features.NPCs.VanillaDownedFlags">
            <summary>
                Defined, well-known APIs for named accesses to vanilla downed flags.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.NPCs.VanillaDownedFlags.EaterOfWorlds">
            <summary>
                Same as <see cref="P:Daybreak.Common.Features.NPCs.VanillaDownedFlags.BrainOfCthulhu" />.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.NPCs.VanillaDownedFlags.BrainOfCthulhu">
            <summary>
                Same as <see cref="P:Daybreak.Common.Features.NPCs.VanillaDownedFlags.EaterOfWorlds" />.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.NPCs.INpcCustomShimmerAi">
            <summary>
                <see cref="T:Terraria.ModLoader.ModNPC" />s implementing this interface will be granted
                control over how their town NPC initiates its shimmer transformation.
                <br />
                Useful for town NPCs with custom AI.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.NPCs.INpcCustomShimmerAi.GetShimmered">
            <summary>
                Invoked in <see cref="M:Terraria.NPC.GetShimmered" />.
                <br />
                Implementors need to explicitly replicate relevant logic, such as
                net syncing, shimmer transparency, and buff handling.
            </summary>
            <remarks>
                A <see cref="T:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags" /> bitmask, indicating what
                behaviors to preserve and which to skip.
            </remarks>
        </member>
        <member name="T:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags">
            <summary>
                Kinds of behavior exhibited by <see cref="M:Terraria.NPC.GetShimmered" />.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.ResetAi">
            <summary>
                Resets all <see cref="F:Terraria.NPC.ai" /> values to <c>0</c>, aside from
                index <c>0</c>, which is set to <c>25f</c>.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.NetUpdate">
            <summary>
                Resets <see cref="F:Terraria.NPC.netUpdate" /> to <see langword="true" />.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.ShimmerTransparency">
            <summary>
                Sets <see cref="F:Terraria.NPC.shimmerTransparency" />.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.RemoveShimmerDebuff">
            <summary>
                Removes the <see cref="F:Terraria.ID.BuffID.Shimmer" /> debuf.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.None">
            <summary>
                No behavior; skips all logic.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.NPCs.NpcShimmerBehaviorFlags.All">
            <summary>
                All behavior; performs vanilla logic.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.PotLoot.IHasPotBehavior">
            <summary>
                Denotes a tile as providing a pot behavior, since it's a pot.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.PotLoot.IHasPotBehavior.Behavior">
            <summary>
                The pot behavior that this tile provides, which should be a
                singleton.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.PotLoot.PotBehavior">
            <summary>
                Describes the behavior of a pot.
            </summary>
            <summary>
                Describes the behavior of a pot.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.SpawnGore(Daybreak.Common.Features.PotLoot.PotBreakContext)">
            <summary>
                Responsible for spawning any gore upon break.  Ideally should not be
                used for anything else.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.ShouldTryForLoot(Daybreak.Common.Features.PotLoot.PotBreakContext)">
            <summary>
                Whether this pot should follow through with its break and try to
                spawn loot or anything else resulting from the pot.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.GetInitialCoinMult(Daybreak.Common.Features.PotLoot.PotLootContext)">
            <summary>
                Gets the initial value for the coin multiplier for this pot.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.ShouldSpawnCoinPortal(Daybreak.Common.Features.PotLoot.PotLootContextWithCoinMult)">
            <summary>
                Whether a coin portal should spawn.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.SpawnCoinPortal(Daybreak.Common.Features.PotLoot.PotLootContextWithCoinMult)">
            <summary>
                Spawns a coin portal.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.PotLoot.PotBehavior.Vanilla">
            <summary>
                Behavior for Terraria's existing pots.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.PotLoot.PotBehavior.VanillaEcho">
            <summary>
                Behavior for the loot-less echo variants of Terraria's pots.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.PotBehavior.TryGetPotBehavior(System.Int32,Daybreak.Common.Features.PotLoot.PotBehavior@)">
            <summary>
                Attempts to get the <see cref="T:Daybreak.Common.Features.PotLoot.PotBehavior" /> of a tile, if present.
            </summary>
            <param name="type">The tile type.</param>
            <param name="potBehavior">The associated pot behavior.</param>
        </member>
        <member name="T:Daybreak.Common.Features.PotLoot.VanillaPotBehavior">
            <summary>
                Provides implementations for vanilla pot types.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.PotLoot.VanillaPotBehavior.#ctor(System.Boolean)">
            <summary>
                Provides implementations for vanilla pot types.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.PotLoot.VanillaPotStyle">
            <summary>
                Well-known pot styles for the vanilla pot types.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Rarities.IRarityTextRenderer">
            <summary>
                A rarity which is responsible for rendering its own text in all
                contexts.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Rarities.IRarityTextRenderer.RenderText(Microsoft.Xna.Framework.Graphics.SpriteBatch,ReLogic.Graphics.DynamicSpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Daybreak.Common.Features.Rarities.RarityDrawContext,System.Single,System.Single)">
            <summary>
                Renders the rarity text arbitrarily.  Invoked for all contexts in
                which rarity text is rendered: popup text, item tooltips, and mouse
                hovers.
            </summary>
            <param name="sb">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> used to render.</param>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="position">The position to draw to.</param>
            <param name="color">The color to draw with.</param>
            <param name="rotation">The rotation to use.</param>
            <param name="origin">The origin of the text.</param>
            <param name="scale">The scale of the text.</param>
            <param name="effects">Any sprite effects (uncommon).</param>
            <param name="maxWidth">The max width (uncommon).</param>
            <param name="spread">The spread (uncommon).</param>
            <param name="drawContext">The context of the render request.</param>
        </member>
        <member name="T:Daybreak.Common.Features.Rarities.ISpeciallyRenderedRarity">
            <summary>
                Enables special rendering of this rarity in the tooltip and pickup text
                displays.
                <br />
                Automatically applied when implemented by a <see cref="T:Terraria.ModLoader.ModRarity" />.  If
                you need to apply it to a type not defined in your assembly or in a
                weak-referenced scenario, see
                <see cref="P:Daybreak.Common.IDs.DaybreakRaritySets.SpecialRarity" />.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Rarities.ISpeciallyRenderedRarity.RenderRarityText(Microsoft.Xna.Framework.Graphics.SpriteBatch,ReLogic.Graphics.DynamicSpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Single,System.Boolean)">
            <summary>
                Renders the rarity text with special logic.  Invoked for both the
                item's tooltip and the item's pickup text.
            </summary>
            <param name="sb">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> used to render.</param>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="position">The position to draw to.</param>
            <param name="color">The color to draw with.</param>
            <param name="rotation">The rotation to use.</param>
            <param name="origin">The origin of the text.</param>
            <param name="scale">The scale of the text.</param>
            <param name="effects">Any sprite effects (uncommon).</param>
            <param name="maxWidth">The max width (uncommon).</param>
            <param name="spread">The spread (uncommon).</param>
            <param name="ui">Whether this is rendering to the UI or in-world.</param>
        </member>
        <member name="T:Daybreak.Common.Features.Rarities.RarityDrawContext">
            <summary>
                The context behind which the rarity is being rendered.
            </summary>
            <param name="Ui">Whether this is rendering in a UI.</param>
            <param name="DrawKind">The known routine in which this is being rendered.</param>
        </member>
        <member name="M:Daybreak.Common.Features.Rarities.RarityDrawContext.#ctor(System.Boolean,Daybreak.Common.Features.Rarities.RarityDrawContext.Kind)">
            <summary>
                The context behind which the rarity is being rendered.
            </summary>
            <param name="Ui">Whether this is rendering in a UI.</param>
            <param name="DrawKind">The known routine in which this is being rendered.</param>
        </member>
        <member name="P:Daybreak.Common.Features.Rarities.RarityDrawContext.Ui">
            <summary>Whether this is rendering in a UI.</summary>
        </member>
        <member name="P:Daybreak.Common.Features.Rarities.RarityDrawContext.DrawKind">
            <summary>The known routine in which this is being rendered.</summary>
        </member>
        <member name="T:Daybreak.Common.Features.Rarities.RarityDrawContext.Kind">
            <summary>
                The sub-categorization of the rarity rendering.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.Rarities.RarityDrawContext.Kind.ItemTooltip">
            <summary>
                As part of an item tooltip.
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.Rarities.RarityDrawContext.Kind.MouseText">
            <summary>
                As part of the mouse hover text (such as over an item in the world).
            </summary>
        </member>
        <member name="F:Daybreak.Common.Features.Rarities.RarityDrawContext.Kind.PopupText">
            <summary>
                As part of the popup text generated when an item is picked up,
                reforged, etc.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Rendering.IPreRenderedItem">
            <summary>
                Implementing this interface allows the item to pre-render a texture for
                the frame which all item rendering will use instead of the original
                texture.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Rendering.IPreRenderedItem.PreRender(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
                Renders the item's texture for use for the current frame.
            </summary>
            <param name="sourceTexture">The actual texture of the item.</param>
        </member>
        <member name="T:Daybreak.Common.Features.Rendering.ItemPreRenderer">
            <summary>
                Pre-renders items each frame.  Useful for items which have shaders
                applied for visual effects that should also apply in contexts such as
                item use and hover.
                <br />
                Best if the intent is essentially to create a procedural animation that
                may be used for all instances of the item without variation.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Rendering.ItemPreRenderer.Load">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Rendering.ItemPreRenderer.Unload">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Rendering.ItemPreRenderer.PostSetupContent">
            <inheritdoc />
        </member>
        <member name="T:Daybreak.Common.Features.Tiles.IPlaceTileHook">
            <summary>
                Implement on a <see cref="T:Terraria.ModLoader.ModTile" /> to hook into
                <see cref="M:Terraria.WorldGen.PlaceTile(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)" /> and execute custom logic.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.IPlaceTileHook.PlaceTile(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="i">The X coordinate.</param>
            <param name="j">The Y coordinate.</param>
            <param name="mute">Inverse to whether a sound should be made.</param>
            <param name="forced">
                Attempts to place even if a tile is already present.
            </param>
            <param name="plr">The player placing the tile, if applicable.</param>
            <param name="style">The provided style of the tile.</param>
            <remarks>
                <paramref name="plr" /> is often not provided and is used only in
                vanilla for placing bathtubs, which use the player to determine the
                direction of the tile being placed.
            </remarks>
        </member>
        <member name="T:Daybreak.Common.Features.Tiles.ICattail">
            <summary>
                Behaves like a Terraria cattail.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.ICattail.CheckCattail(System.Int32,System.Int32)">
            <summary>
                Checks validity of the tile and kills it if it isn't valid.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.ICattail.GrowCattail(System.Int32,System.Int32)">
            <summary>
                Grows a cattail at the specified coordinates.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.ICattail.ClimbCattail(System.Int32,System.Int32)">
            <summary>
                Climbs to the bottom of a cattail and returns the height.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Tiles.CattailTile">
            <summary>
                Cattail implementation.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.GrowCattail(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.ClimbCattail(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.CheckCattail(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.SetStaticDefaults">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.RandomUpdate(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.TileFrame(System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.CattailTile.PreDraw(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="T:Daybreak.Common.Features.Tiles.ILilyPad">
            <summary>
                Behaves like a Terraria lily pad.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Features.Tiles.ILilyPad.VanillaDrawTileInWater">
            <summary>
                Whether to use vanilla's <see cref="M:Terraria.Main.DrawTileInWater(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)" /> logic.
            </summary>
            <remarks>
                If enabled, this also disables regular solid tile drawing.
            </remarks>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.ILilyPad.CheckLilyPad(System.Int32,System.Int32)">
            <summary>
                Checks validity of the tile and kills it if it isn't valid.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Features.Tiles.LilyPadTile">
            <summary>
                Lily pad implementation.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.LilyPadTile.CheckLilyPad(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.LilyPadTile.SetStaticDefaults">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.Features.Tiles.LilyPadTile.TileFrame(System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Daybreak.Common.IDs.DaybreakItemSets">
            <summary>
                Provides item ID sets.
            </summary>
        </member>
        <member name="M:Daybreak.Common.IDs.DaybreakItemSets.ResizeArrays">
            <inheritdoc />
        </member>
        <member name="T:Daybreak.Common.IDs.DaybreakNpcSets">
            <summary>
                Provides NPC ID sets.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.CanParty">
            <summary>
                Whether the NPC can participate in parties.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.ContributesToEocSpawn">
            <summary>
                Whether the NPC should be counted when determining whether the Eye
                of Cthulhu is eligible to spawn.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.ContributesToTravelingMerchantSpawn">
            <summary>
                Whether the NPC should be counted when determing whether the
                Traveling Merchant is eligible to spawn.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.TravelingMerchantCanSpawnNear">
            <summary>
                Whether the Traveling Merchant can choose this NPC as an NPC to
                randomly spawn near.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.VulnerableToAfterPartyOfDoom">
            <summary>
                Whether this NPC may be killed when the 'after-party of doom' is
                triggered.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.TownNpcContributesToTownNpcSlots">
            <summary>
                Whether this town NPC contributes to town NPC slot counts.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakNpcSets.ContributesToTownNpcSpawnCount">
            <summary>
                Whether this NPC contributes to the town NPC spawn count.
            </summary>
        </member>
        <member name="M:Daybreak.Common.IDs.DaybreakNpcSets.ResizeArrays">
            <inheritdoc />
        </member>
        <member name="M:Daybreak.Common.IDs.DaybreakNpcSets.Load">
            <summary>
                Initializes hooks/set implementations.
            </summary>
        </member>
        <member name="T:Daybreak.Common.IDs.DaybreakRaritySets">
            <summary>
                Provides rarity ID sets.
            </summary>
        </member>
        <member name="P:Daybreak.Common.IDs.DaybreakRaritySets.SpecialRarity">
            <summary>
                Allows you to map a raw implementation of
                <see cref="T:Daybreak.Common.Features.Rarities.IRarityTextRenderer" /> to an existing rarity ID
                (either from vanilla, another mod, or your own if you're
                weak-referencing DAYBREAK).
            </summary>
        </member>
        <member name="M:Daybreak.Common.IDs.DaybreakRaritySets.ResizeArrays">
            <inheritdoc />
        </member>
        <member name="T:Daybreak.Common.IDs.DaybreakTileSets">
            <summary>
                Provides Tile ID sets.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Rendering.SpriteBatchSnapshot">
            <summary>
                A "snapshot" of the current state of a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.
                <br />
                These values may be manipulated freely.
            </summary>
            <param name="spriteBatch">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> to take a snapshot of.
            </param>
            <remarks>
                This API exists for making preservation of a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />'s
                state trivial.
                <br />
                The act of taking a snapshot through this object's constructor is pure
                (that is, it has no side effects).  It will not mutate the state of the
                <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> being analyzed.  If you intend to modify the
                <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />, use the APIs provided in
                <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions" />.
            </remarks>
        </member>
        <member name="M:Daybreak.Common.Rendering.SpriteBatchSnapshot.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
                A "snapshot" of the current state of a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.
                <br />
                These values may be manipulated freely.
            </summary>
            <param name="spriteBatch">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> to take a snapshot of.
            </param>
            <remarks>
                This API exists for making preservation of a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />'s
                state trivial.
                <br />
                The act of taking a snapshot through this object's constructor is pure
                (that is, it has no side effects).  It will not mutate the state of the
                <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> being analyzed.  If you intend to modify the
                <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />, use the APIs provided in
                <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions" />.
            </remarks>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.SortMode">
            <summary>
                The sort mode.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.BlendState">
            <summary>
                The blend state.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.SamplerState">
            <summary>
                The sampler state.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.DepthStencilState">
            <summary>
                The depth stencil state.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.RasterizerState">
            <summary>
                The rasterizer state.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.CustomEffect">
            <summary>
                The custom effect, if applicable.
            </summary>
        </member>
        <member name="P:Daybreak.Common.Rendering.SpriteBatchSnapshot.TransformMatrix">
            <summary>
                The transformation matrix.
            </summary>
        </member>
        <member name="T:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions">
            <summary>
                Extensions to <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> using
                <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" /> instances.
            </summary>
        </member>
        <member name="M:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions.End(Microsoft.Xna.Framework.Graphics.SpriteBatch,Daybreak.Common.Rendering.SpriteBatchSnapshot@)">
            <summary>
                Takes a snapshot of the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> and then ends the
                <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />/
            </summary>
            <param name="this">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.</param>
            <param name="ss">The produced <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" />.</param>
        </member>
        <member name="M:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions.Begin(Microsoft.Xna.Framework.Graphics.SpriteBatch,Daybreak.Common.Rendering.SpriteBatchSnapshot@)">
            <summary>
                Starts a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> with the parameters from the
                given <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" />.
            </summary>
            <param name="this">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.</param>
            <param name="ss">The <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" /> to use.</param>
        </member>
        <member name="M:Daybreak.Common.Rendering.SpriteBatchSnapshotExtensions.Restart(Microsoft.Xna.Framework.Graphics.SpriteBatch,Daybreak.Common.Rendering.SpriteBatchSnapshot@)">
            <summary>
                Immediately ends and then starts the given <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />
                with the parameters from the given
                <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" />.
            </summary>
            <param name="this">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.</param>
            <param name="ss">The <see cref="T:Daybreak.Common.Rendering.SpriteBatchSnapshot" /> to use.</param>
        </member>
        <member name="T:Daybreak.Content.Compatibility.BetterExpertRarityCompat">
            <summary>
                Rewrites &quot;Better Expert Rarity&quot; to integrate with our rarity
                system.  Disables any of their edits and redirects their APIs to use
                ours.
            </summary>
        </member>
        <member name="T:Daybreak.Content.Compatibility.PrettyRaritiesCompat">
            <summary>
                Rewrites &quot;Better Tooltips&quot; to integrate with our rarity
                system.  Disables any of their edits and redirects their APIs to use
                ours.
            </summary>
        </member>
        <member name="T:Daybreak.Core.Hooks.IInitializer">
            <summary>
                The basic implementation of the DAYBREAK initializer APIs.  Implements
                <see cref="T:Terraria.ModLoader.ILoadable" /> and facilitates basic execution of the
                <see cref="T:Daybreak.Core.Hooks.ILoad" /> and <see cref="T:Daybreak.Core.Hooks.IUnload" /> hooks if present.
            </summary>
        </member>
        <member name="T:Daybreak.Core.Hooks.ILoad">
            <summary>
                Provides a load hook.
            </summary>
        </member>
        <member name="M:Daybreak.Core.Hooks.ILoad.Load">
            <summary>
                The load hook.
            </summary>
        </member>
        <member name="T:Daybreak.Core.Hooks.IUnload">
            <summary>
                Provides an unload hook.
            </summary>
        </member>
        <member name="M:Daybreak.Core.Hooks.IUnload.Unload">
            <summary>
                The unload hook.
            </summary>
        </member>
        <member name="T:Daybreak.ModImpl">
            <summary>
                The <see cref="T:Terraria.ModLoader.Mod" /> implementation for DAYBREAK.
            </summary>
        </member>
        <member name="M:Daybreak.ModImpl.#ctor">
            <inheritdoc />
        </member>
    </members>
</doc>
